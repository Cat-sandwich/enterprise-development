@page "/supplies"
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle>Supplies</PageTitle>

<h1>Поставки</h1>

<Button class="add-new-button" Clicked="@ShowAddModal" Color="Blazorise.Color.Primary" Style="width: 200px; height: 40px;">
    Добавить поставку
</Button>


<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Поставщик</th>
                <th>Предприятие</th>
                <th>Количество единиц сырья</th>
                <th>Дата поставки</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supply in _supplies)
            {
                <tr>
                    <td>@supply.Id</td>
                    <td>@(GetSupplierName(supply.Supplier.Id))</td>
                    <td>@(GetEnterpriseName(supply.Enterprise.MainStateRegistrationNumber))</td>
                    <td>@supply.Quanity</td>
                    <td>@supply.Date</td>
                    <td>
                        <Button 
                                class="edit-item"
                                @onclick="@(() => ShowUpdModal(supply.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                    <td>
                        <Button class="edit-item"
                                @onclick="@(() => DeleteSupply(supply.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>

                </tr>
            }
        </tbody>
    </table>

</div>

<Modal @ref="_modalRef" >
    @if (string.IsNullOrEmpty(_errorMessage))
    {
        <ModalContent Centered>
            <ModalBody>
                <div class="mb-3">
                    <label for="supplier">Поставщик:</label>
                    <select id="supplier" @bind="_newSupply.Supplier.Id">
                        @foreach (var supplier in _suppliers)
                        {
                            <option value="@supplier.Id">@supplier.Id @supplier.FullName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="enterprise">Предприятие:</label>
                    <select id="enterprise" @bind="_newSupply.Enterprise.MainStateRegistrationNumber">
                        @foreach (var enterprise in _enterprises)
                        {
                            <option>@enterprise.MainStateRegistrationNumber</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="quanity">Количество единиц сырья:</label>
                    <input type="number" id="quanity" @bind="_newSupply.Quanity" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="date">Дата поставки:</label>
                    <input type="date" id="date" @bind="_newSupply.Date" class="form-control" />
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Primary" Clicked="@(_forAdd ? AddNewSupply : UpdateSupply)">
                    @(_forAdd ? "Добавить" : "Изменить")
                </Button>
                <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                    Отмена
                </Button>
            </ModalFooter>
        </ModalContent>
    }
    else
    {
    <ModalContent Centered>
        <ModalBody style="white-space: pre-wrap;">
            @_errorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                ОК
            </Button>
        </ModalFooter>
    </ModalContent>
    }
</Modal>


@code {
    private List<Supply> _supplies = new();
    private List<Supplier> _suppliers = new();
    private List<Enterprise> _enterprises = new();

    private Modal? _modalRef = null!;
    private Supply _newSupply = new() 
    {       Id = 0,
            Supplier = new()
        {
                Id = 0,
                FullName = "",
                Address = "",
                Phone = ""            
        },
        Enterprise = new()
        {
                MainStateRegistrationNumber = 0,
                Name = "",
                Address = "",
                Phone = "",
                EmployeeCount = 0,
                TotalArea = 0,
                IndustryType = IndustryTypes.AgriculturalIndustry,
                OwnershipForm = OwnershipForms.LimitedLiabilityPartnership
        },
            Quanity = 0,
            Date = DateTime.ParseExact("01.01.2000", "dd.MM.yyyy", CultureInfo.InvariantCulture)
        };
    private bool _forAdd = true;
    private string _supplyUrl = "api/Supply";
    private string _errorMessage = "";

    private async Task LoadSuppliers()
    {
        var response = await Http.GetFromJsonAsync<List<Supplier>>("api/Supplier");
        if (response != null)
        {
            _suppliers = response;
            _newSupply.Supplier.Id = _suppliers.Select(s => s.Id).First();
        }
    }

    private async Task LoadEnterprises()
    {
        var response = await Http.GetFromJsonAsync<List<Enterprise>>("api/Enterprise");
        if (response != null)
        {
            _enterprises = response;
            _newSupply.Enterprise.MainStateRegistrationNumber = _enterprises.Select(e => e.MainStateRegistrationNumber).First();
        }

    }

    private string GetEnterpriseName(ulong id) => _enterprises?.FirstOrDefault(e => e.MainStateRegistrationNumber == id)?.Name!;

    private string GetSupplierName(int id) => _suppliers?.FirstOrDefault(s => s.Id == id)?.FullName!;

    protected override async Task OnInitializedAsync()
    {
        await UpdateMainList();
        await LoadSuppliers();
        await LoadEnterprises();
    }

    private async Task UpdateMainList()
    {
        var response = await Http.GetFromJsonAsync<List<Supply>>(_supplyUrl);
        if (response != null)
        {
            _supplies = response;
        }
    }

    private async Task AddNewSupply()
    {
        
        var newItem = new SupplyDto
            {
                IdSupplier = _newSupply.Supplier.Id,
                MainStateRegistrationNumber = _newSupply.Enterprise.MainStateRegistrationNumber,
                Quanity = _newSupply.Quanity,
                Date = _newSupply.Date
            };
        var response = await Http.PostAsJsonAsync<SupplyDto>(_supplyUrl, newItem);

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Поставка не добавлена. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if (string.IsNullOrEmpty(_errorMessage))
        {
            await UpdateMainList();
            await _modalRef!.Hide();
        }
       
    }

    private async Task DeleteSupply(int id)
    {
        await Http.DeleteAsync($"{_supplyUrl}/{id}");
        await UpdateMainList();
    }

    private async Task UpdateSupply()
    {

        var newItem = new SupplyDto
            {
                IdSupplier = _newSupply.Supplier.Id,
                MainStateRegistrationNumber = _newSupply.Enterprise.MainStateRegistrationNumber,
                Quanity = _newSupply.Quanity,
                Date = _newSupply.Date
            };
        var response = await Http.PutAsJsonAsync($"{_supplyUrl}/{_newSupply.Id}", newItem);

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Поставка не обновлена. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if (string.IsNullOrEmpty(_errorMessage))
        {
            _newSupply = new()
                {
                    Id = 0,
                    Supplier = _suppliers.First(),
                    Enterprise = _enterprises.First(),
                    Quanity = 0,
                    Date = DateTime.Now
                };
            await UpdateMainList();
            await _modalRef!.Hide();
        }
    }

    private async Task ShowUpdModal(int id)
    {
        _forAdd = false;
        var response = await Http.GetFromJsonAsync<Supply>($"{_supplyUrl}/{id}");
        if (response != null)
        {
            _newSupply = response;
        }
        await _modalRef!.Show();
    }

    private async Task ShowAddModal() {
        _forAdd = true;
        _newSupply = new()
            {
                Id = 0,
                Supplier = new()
                {
                    Id = 0,
                    FullName = "",
                    Address = "",
                    Phone = ""
                },
                Enterprise = new()
                {
                    MainStateRegistrationNumber = 0,
                    Name = "",
                    Address = "",
                    Phone = "",
                    EmployeeCount = 0,
                    TotalArea = 0,
                    IndustryType = IndustryTypes.AgriculturalIndustry,
                    OwnershipForm = OwnershipForms.LimitedLiabilityPartnership
                },
                Quanity = 0,
                Date = DateTime.Now
            };
        await _modalRef!.Show();
    }

    private async Task CancelHandler()
    {
        await _modalRef!.Hide();
        _errorMessage = "";
    }

} 