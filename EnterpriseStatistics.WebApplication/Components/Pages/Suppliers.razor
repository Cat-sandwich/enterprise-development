@page "/suppliers"
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle>Suppliers</PageTitle>

<h1>Поставщики</h1>

<Button class="add-new-button" Clicked="@ShowAddModal" Color="Blazorise.Color.Primary" Style="width: 200px; height: 40px;">
    Добавить поставщика
</Button>


<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>ФИО</th>
                <th>Адрес</th>
                <th>Телефон</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplier in _suppliers)
            {
                <tr>
                    <td>@supplier.Id</td>
                    <td>@supplier.FullName</td>
                    <td>@supplier.Address</td>
                    <td>@supplier.Phone</td>
                    <td>
                        <Button 
                                class="edit-item"
                                @onclick="@(() => ShowUpdModal(supplier.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                    <td>
                        <Button class="edit-item"
                                @onclick="@(() => DeleteSupplier(supplier.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>

                </tr>
            }
        </tbody>
    </table>

</div>

<Modal @ref="_modalRef">
    @if (string.IsNullOrEmpty(_errorMessage))
    {
        <ModalContent Centered>
            <ModalBody>
                <div class="mb-3">
                    <label for="name">ФИО:</label>
                    <input type="text" id="name" @bind="_newSupplier.FullName" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="address">Адрес:</label>
                    <input type="text" id="address" @bind="_newSupplier.Address" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="phone">Телефон:</label>
                    <input type="text" id="phone" @bind="_newSupplier.Phone" class="form-control" />
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Primary" Clicked="@(_forAdd ? AddNewSupplier : UpdateSupplier)">
                    @(_forAdd ? "Добавить" : "Изменить")
                </Button>
                <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                    Отмена
                </Button>
            </ModalFooter>
        </ModalContent>
    }
    else
    {
        <ModalContent Centered>
            <ModalBody style="white-space: pre-wrap;">
                @_errorMessage
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                    ОК
                </Button>
            </ModalFooter>
        </ModalContent>
    }
</Modal>

@code {
    private List<Supplier> _suppliers = new();
    private Modal? _modalRef = null!;
    private Supplier _newSupplier = new() 
    {       Id = 0,
            FullName = "",
            Address = "",
            Phone = ""
    };
    private bool _forAdd = true;
    private string _supplierUrl = "api/Supplier";
    private string _errorMessage = "";

    private async Task UpdateMainList()
    {
        var response = await Http.GetFromJsonAsync<List<Supplier>>(_supplierUrl);
        if (response != null)
        {
            _suppliers = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateMainList();
    }

    private async Task AddNewSupplier()
    {
        var response = await Http.PostAsJsonAsync<Supplier>(_supplierUrl, _newSupplier);

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Поставщик не добавлен. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if(string.IsNullOrEmpty(_errorMessage))
        {
            await UpdateMainList();
            await _modalRef!.Hide();
        }
    }

    private async Task DeleteSupplier(int id)
    {
        await Http.DeleteAsync($"{_supplierUrl}/{id}");
        await UpdateMainList(); 
    }

    private async Task UpdateSupplier()
    {
        var response = await Http.PutAsJsonAsync($"{_supplierUrl}/{_newSupplier.Id}", _newSupplier); ;

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Поставщик не обновлен. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if (string.IsNullOrEmpty(_errorMessage))
        {
            _newSupplier = new()
                {
                    Id = 0,
                    FullName = "",
                    Address = "",
                    Phone = ""
                };
            await UpdateMainList();
            await _modalRef!.Hide();
        }

    }

    private async Task ShowUpdModal(int id)
    {
        _forAdd = false;
        var response = await Http.GetFromJsonAsync<Supplier>($"{_supplierUrl}/{id}");
        if (response != null)
        {
            _newSupplier = response;
        }
        await _modalRef!.Show();
    }

    private async Task ShowAddModal() {
        _forAdd = true;
        _newSupplier = new()
            {
                Id = 0,
                FullName = "",
                Address = "",
                Phone = ""
            };
        await _modalRef!.Show();
    }

    private async Task CancelHandler()
    {
        await _modalRef!.Hide();
        _errorMessage = "";
    }

} 