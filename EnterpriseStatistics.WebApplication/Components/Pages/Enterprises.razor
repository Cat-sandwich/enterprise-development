@page "/"
@inject HttpClient Http
@inject IDialogService DialogService
<PageTitle>Enterprise</PageTitle>

<h1>Предприятия</h1>

<Button class="add-new-button" Clicked="@ShowAddModal" Color="Blazorise.Color.Primary" Style="width: 200px; height: 40px;">
    Добавить предприятие
</Button>

<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>ОГРН</th>
                <th>Название</th>
                <th>Адрес</th>
                <th>Телефон</th>
                <th>Количество работников</th>
                <th>Общая площадь</th>
                <th>Тип отрасли</th>
                <th>Форма собственности</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var enterprise in _enterprises)
            {
                <tr>
                    <td>@enterprise.MainStateRegistrationNumber</td>
                    <td>@enterprise.Name</td>
                    <td>@enterprise.Address</td>
                    <td>@enterprise.Phone</td>
                    <td>@enterprise.EmployeeCount</td>
                    <td>@enterprise.TotalArea</td>
                    <td>@enterprise.IndustryType</td>
                    <td>@enterprise.OwnershipForm</td>
                    <td>
                        <Button 
                                class="edit-item"
                                @onclick="@(() => ShowUpdModal(enterprise.MainStateRegistrationNumber))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                    <td>
                        <Button class="edit-item"
                                @onclick="@(() => DeleteEnterprise(enterprise.MainStateRegistrationNumber))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>

                </tr>
            }
        </tbody>
    </table>

</div>

<Modal @ref="_modalRef" >
    @if (string.IsNullOrEmpty(_errorMessage))
    {
        <ModalContent Centered>
            <ModalBody>
                <div class="mb-3">
                    <label for="mainStateRegistrationNumber">ОГРН:</label>
                    <input type="number" id="mainStateRegistrationNumber" @bind="_newEnterprise.MainStateRegistrationNumber" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="name">Название:</label>
                    <input type="text" id="name" @bind="_newEnterprise.Name" class="form-control" />

                </div>
                <div class="mb-3">
                    <label for="address">Адрес:</label>
                    <input type="text" id="address" @bind="_newEnterprise.Address" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="phone">Телефон:</label>
                    <input type="text" id="phone" @bind="_newEnterprise.Phone" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="employeeCount">Количество работников:</label>
                    <input type="number" id="employeeCount" @bind="_newEnterprise.EmployeeCount" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="totalArea">Общая площадь:</label>
                    <input type="number" id="totalArea" @bind="_newEnterprise.TotalArea" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="industryType">Тип отрасли:</label>
                    <select id="industryType" @bind="_newEnterprise.IndustryType">
                        @foreach (var industryType in Enum.GetValues<IndustryTypes>())
                        {
                            <option value="@industryType">@industryType</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="ownershipForm">Форма собственности:</label>
                    <select id="ownershipForm" @bind="_newEnterprise.OwnershipForm">
                        @foreach (var ownershipForm in Enum.GetValues<OwnershipForms>())
                        {
                            <option value="@ownershipForm">@ownershipForm</option>
                        }
                    </select>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Primary" Clicked="@(_forAdd ? AddNewEnterprise : UpdateEnterprise)">
                    @(_forAdd ? "Добавить" : "Изменить")
                </Button>
                <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                    Отмена
                </Button>
            </ModalFooter>
        </ModalContent>
    }
    else
    {
    <ModalContent Centered>
        <ModalBody style="white-space: pre-wrap;">
            @_errorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                ОК
            </Button>
        </ModalFooter>
    </ModalContent>
    }
</Modal>



@code {
    private List<Enterprise> _enterprises = new();
    private Modal? _modalRef = null!;
    private Enterprise _newEnterprise = new() 
    {       MainStateRegistrationNumber = 0,
            Name = "",
            Address = "",
            Phone = "",
            EmployeeCount = 0,
            TotalArea = 0,
            IndustryType = IndustryTypes.AgriculturalIndustry,
            OwnershipForm = OwnershipForms.LimitedLiabilityPartnership};
    private bool _forAdd = true;
    private string _enterpriseUrl = "api/Enterprise";
    private string _errorMessage = "";

    private async Task UpdateMainList()
    {
        var response = await Http.GetFromJsonAsync<List<Enterprise>>(_enterpriseUrl);
        if (response != null)
        {
            _enterprises = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateMainList();
    }

    private async Task AddNewEnterprise()
    {
        var newItem = new EnterpriseDto
            {
                Name = _newEnterprise.Name,
                MainStateRegistrationNumber = _newEnterprise.MainStateRegistrationNumber,
                Address = _newEnterprise.Address,
                Phone = _newEnterprise.Phone,
                EmployeeCount = _newEnterprise.EmployeeCount,
                TotalArea = _newEnterprise.TotalArea,
                IndustryType = _newEnterprise.IndustryType.ToString(),
                OwnershipForm = _newEnterprise.OwnershipForm.ToString()
            };
        var response = await Http.PostAsJsonAsync<EnterpriseDto>(_enterpriseUrl, newItem);

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Предприятие не добавлено. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if (string.IsNullOrEmpty(_errorMessage))
        {
            await UpdateMainList();
            await _modalRef!.Hide();
        }
    }

    private async Task DeleteEnterprise(ulong mainStateRegistrationNumber)
    {
        await Http.DeleteAsync($"{_enterpriseUrl}/{mainStateRegistrationNumber}");
        await UpdateMainList();
    }

    private async Task UpdateEnterprise()
    {
        var newItem = new EnterpriseDto
            {
                Name = _newEnterprise.Name,
                MainStateRegistrationNumber = _newEnterprise.MainStateRegistrationNumber,
                Address = _newEnterprise.Address,
                Phone = _newEnterprise.Phone,
                EmployeeCount = _newEnterprise.EmployeeCount,
                TotalArea = _newEnterprise.TotalArea,
                IndustryType = _newEnterprise.IndustryType.ToString(),
                OwnershipForm = _newEnterprise.OwnershipForm.ToString()
            };
        var response = await Http.PutAsJsonAsync($"{_enterpriseUrl}/{_newEnterprise.MainStateRegistrationNumber}", newItem);

        if (!response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _errorMessage += "Предприятие не добавлено. Список ошибок:\n";

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                try
                {
                    var jsonDocument = JsonDocument.Parse(content);
                    if (jsonDocument.RootElement.TryGetProperty("errors", out JsonElement errorsElement))
                    {
                        foreach (var error in errorsElement.EnumerateObject())
                        {
                            foreach (var errorMessage in error.Value.EnumerateArray())
                            {
                                _errorMessage += $"{errorMessage}\n";
                            }
                        }
                    }
                    else
                    {
                        _errorMessage += $"Ошибки не найдены в теле ответа. Текст ответа: {content}";
                    }
                }
                catch (JsonException)
                {
                    _errorMessage += $"Ошибка в формате ответа сервера. Текст ответа: {content}";
                }
            }
            else
            {
                _errorMessage += $"Неожиданная ошибка: {response.StatusCode}";
            }

        }
        if (string.IsNullOrEmpty(_errorMessage))
        {
            _newEnterprise = new()
                {
                    MainStateRegistrationNumber = 0,
                    Name = "",
                    Address = "",
                    Phone = "",
                    EmployeeCount = 0,
                    TotalArea = 0,
                    IndustryType = IndustryTypes.AgriculturalIndustry,
                    OwnershipForm = OwnershipForms.LimitedLiabilityPartnership
                };
            await UpdateMainList();
            await _modalRef!.Hide();
        }
    }

    private async Task ShowUpdModal(ulong mainStateRegistrationNumber)
    {
        _forAdd = false;
        var response = await Http.GetFromJsonAsync<Enterprise>($"{_enterpriseUrl}/{mainStateRegistrationNumber}");
        if (response != null)
        {
            _newEnterprise = response;
        }
        await _modalRef!.Show();
    }

    private async Task ShowAddModal() {
        _forAdd = true;
        _newEnterprise = new()
            {
                MainStateRegistrationNumber = 0,
                Name = "",
                Address = "",
                Phone = "",
                EmployeeCount = 0,
                TotalArea = 0,
                IndustryType = IndustryTypes.AgriculturalIndustry,
                OwnershipForm = OwnershipForms.LimitedLiabilityPartnership
            }; 
        await _modalRef!.Show();
    }

    private async Task CancelHandler()
    {
        await _modalRef!.Hide();
        _errorMessage = "";
    }
} 